<%
latitude     = 34.685067
longitude    = 135.199281
locationName = "KIITO"


# jsonを読み込む。リストの最初が左下座標、最後が右上座標。
# data = [
#  [135.1083339342, 34.79166694500001, 4],
#  [135.11250060089998, 34.79166694500001, 4],
#  ...
#  [135.1083339342, 34.78750027830001, 5],
#  [135.11250060089998, 34.78750027830001, ...],
#  ...
# ]
light_data            = Jason.decode!(elem(File.read("assets/result.json"),1))
[min_lon, max_lat, _] = Enum.at(light_data,0)
[max_lon, min_lat, _] = List.last(light_data)
num_of_lon_area = length(Enum.filter(light_data, &Enum.at(&1,1) == min_lat))
num_of_lat_area = length(Enum.filter(light_data, &Enum.at(&1,0) == min_lon))
dlon = (max_lon - min_lon) / (num_of_lon_area - 1)
dlat = (max_lat - min_lat) / (num_of_lat_area - 1)
# dataの座標はエリアの中心座標。差分/2を足し引きするとエリアが復元できる
rlon = dlon/2
rlat = dlat/2

data = [
    %{name: "二宮温泉", longitude: 135.1958495, latitude: 34.6982648},
    %{name: "HATなぎさの湯", longitude: 135.2132588, latitude: 34.6957018},
    %{name: "つかさ湯", longitude: 135.180154, latitude: 34.686355},
    %{name: "兵庫県公衆浴場業生活衛生同業組合", longitude: 135.178596, latitude: 34.688325},
    %{name: "相生湯", longitude: 135.1755739, latitude: 34.6931657},
    %{name: "ラドン温泉たちばな湯", longitude: 135.170616, latitude: 34.682589},
    %{name: "割塚温泉", longitude: 135.2105256, latitude: 34.7052324},
    %{name: "銭湯朝日湯", longitude: 135.2021821, latitude: 34.7047818},
    %{name: "みなと湯", longitude: 135.174535, latitude: 34.67572},
    %{name: "（有）富清観光", longitude: 135.169983, latitude: 34.680231}
]

# 明るさカウントブロックデータ
label     = [:longitude, :latitude, :minlongitude, :minlatitude, :maxlongitude, :maxlatitude, :count]
blocklist = Enum.map(light_data, fn(i)->
    Enum.zip(label,[
        Enum.at(i,0),
        Enum.at(i,1),
        Enum.at(i,0) - rlon,
        Enum.at(i,1) - rlat,
        Enum.at(i,0) + rlon,
        Enum.at(i,1) + rlat,
        Enum.at(i,2)
    ])
end)
%>

<div id="map"></div>
<div id="out"></div>
<div id="dijkstra"></div>
<script>
    var output = document.getElementById("out");
    if (!navigator.geolocation){
        output.innerHTML = "<p>Geolocation is not supported by your browser</p>";
    }
    
 
    function success(position) {
        // var latitude  = position.coords.latitude;
        // var longitude = position.coords.longitude;
        var latitude =  <%= latitude %>;
        var longitude = <%= longitude %>;

        var map = L.map('map').setView([latitude, longitude], 13);

        //mapboxのベースタイルを読み込む
        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 18,
            id: 'mapbox.streets',
            accessToken: 'pk.eyJ1IjoicHJvY29ubGlmZSIsImEiOiJjanM4YjI4aTAxNW4zNGFtczR1ajdrbzlvIn0.81axTvh8oPJhrFYDZhuCzA'
        }).addTo(map);
        // geeの出力を読み込む
        L.tileLayer('https://storage.googleapis.com/testgeomap/night_201805/{z}/{x}/{y}', {
            opacity: 0.5,
            maxZoom: 13,
            id: 'mytie'
        }).addTo(map);
        // 現在位置のピンを置く
        //L.marker([latitude, longitude],{icon: icon_hospital}).addTo(map)
        L.marker([latitude, longitude]).addTo(map)
        .bindPopup('現在位置')
        .openPopup();

        // ☆ブロック情報の可視化
        <%= for block_ <- Enum.with_index(blocklist, 1) do %>
        <% block = elem(block_,0)%>
        L.polygon([
            [<%= block[:minlatitude] %>, <%= block[:minlongitude] %>],
            [<%= block[:minlatitude] %>, <%= block[:maxlongitude] %>],
            [<%= block[:maxlatitude] %>, <%= block[:maxlongitude] %>],
            [<%= block[:maxlatitude] %>, <%= block[:minlongitude] %>]
        ]).addTo(map);
        //L.marker([<%= block[:latitude] %>, <%= block[:longitude] %>]).addTo(map).bindPopup('<%= elem(block_,1)%><p><%= block[:count] %></p>')
        <% end %>

        <%= for datum <- data do %>
        // 地点情報のピン
        var to =  turf.point([<%= datum[:"latitude"] %>,<%= datum[:"longitude"] %>]);
        var from = turf.point([latitude, longitude]);
        var options = {units: 'kilometers'}; 
        var distance = turf.distance(from, to, options);

        //L.marker([<%= datum[:"latitude"] %>,<%= datum[:"longitude"] %>]).addTo(map)
        //.bindPopup('<%= datum[:"name"] %><p>現在位置からの距離：'+ Math.round(distance*1000) + 'm</p>')
        <% end %>

        // Dijkstra
        function Node(id, light, latitude, longitude) {
            this.edgesTo      = [];
            this.edgesCost    = [];
            this.facility     = [];
            this.done         = false;
            this.cost         = -1;
            this.light        = light;
            this.id           = id;
            this.latitude     = latitude;
            this.longitude    = longitude;
            this.previousNode = null;
        }
        Node.prototype.addNode = function (node, cost) {
            this.edgesTo.push(node);
            this.edgesCost.push(cost);
        };
        Node.prototype.addFacility = function (name) {
            this.facility.push(name);
        }

        function createNodes() {
            <%
            lower_edge_index = Enum.map(1..num_of_lon_area, fn x -> x end)
            left_edge_index  = Enum.map(1..num_of_lat_area, fn x -> x * num_of_lon_area end)
            right_edge_index = Enum.map(1..num_of_lat_area, fn x -> x * num_of_lon_area - 1 end)
            upper_edge_index = Enum.map(1..num_of_lon_area, fn x -> x + (num_of_lat_area - 1) * num_of_lon_area end)
            edge_index       = lower_edge_index ++ left_edge_index ++ right_edge_index ++ upper_edge_index
            %>

            <%= for block <- Enum.with_index(blocklist, 1) do %>
            var node<%= elem(block,1) %> = new Node(<%= elem(block,1)%>, <%= elem(block,0)[:count]%>, <%= elem(block,0)[:latitude]%>, <%= elem(block,0)[:longitude]%>);
            <% end %>

            <%= for block <- Enum.with_index(blocklist, 1) do %>
            <%= unless Enum.member?(edge_index, elem(block,1)) do %>
            if ( <%= elem(block,0)[:longitude] %> <= longitude ) {
                node<%= elem(block,1)+1 %>.addNode(node<%= elem(block,1) %>, 255 / node<%= elem(block,1) %>.light)
            }
            if ( <%= elem(block,0)[:longitude] %> >= longitude ) {
                node<%= elem(block,1)-1 %>.addNode(node<%= elem(block,1) %>, 255 / node<%= elem(block,1) %>.light)
            }
            if ( <%= elem(block,0)[:latitude] %> >= latitude ) {
                node<%= elem(block,1)+num_of_lon_area %>.addNode(node<%= elem(block,1) %>, 255 / node<%= elem(block,1) %>.light)
            }
            if ( <%= elem(block,0)[:latitude] %> <= latitude ) {
                node<%= elem(block,1)-num_of_lon_area %>.addNode(node<%= elem(block,1) %>, 255 / node<%= elem(block,1) %>.light)
            }
            <% end %>
            <% end %>

            return [
                <%= for area_index <- Enum.map(1..num_of_lat_area*num_of_lon_area-1, fn x -> x end) do %>
                node<%= area_index %>,
                <% end %>
                node<%= num_of_lat_area*num_of_lon_area %>
            ];
        }

        function main() {
            var nodes = createNodes();
            // start node is first node

            nodes[1218].cost = 0;

            while (true) {
                var processNode = null;

                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];

                    // 訪問済み or まだコストが未設定
                    if (node.done || node.cost < 0) {
                        continue;
                    }

                    if (!processNode) {
                        processNode = node;
                        continue;
                    }

                    // 一番小さいコストのノードを探す
                    if (node.cost < processNode.cost) {
                        processNode = node;
                    }
                }

                if (!processNode) {
                    break;
                }

                processNode.done = true;

                for (var i = 0; i < processNode.edgesTo.length; i++) {
                    var node = processNode.edgesTo[i];
                    var cost = processNode.cost + processNode.edgesCost[i];

                    // コストが未設定 or コストの少ない経路がある場合はアップデート
                    var needsUpdate = (node.cost < 0) || (node.cost > cost);
                    if (needsUpdate) {
                        node.cost = cost;
                        node.previousNode = processNode;
                    }
                }
            }

            console.log('Has been done to search path.');
            console.log(nodes);

            var goalNode = nodes[1257];
            console.log('Shoten cost is ' + goalNode.cost);

            console.log('Shoten path');

            console.log('=====================');
            var path = 'Goal -> ';
            var currentNode = goalNode;
            var waypoint    = [];
            while(true) {
                var nextNode = currentNode.previousNode;
                if (!nextNode) {
                    path += ' Start';
                    break;
                }
                
                path += nextNode.id + ' -> ';
                currentNode = nextNode;
            }

            console.log(path);
            console.log('=====================');

            L.Routing.control({
                    router: L.Routing.mapbox('pk.eyJ1IjoicHJvY29ubGlmZSIsImEiOiJjanM4YjI4aTAxNW4zNGFtczR1ajdrbzlvIn0.81axTvh8oPJhrFYDZhuCzA'),
                    //serviceUrl: 'https://api.mapbox.com/directions/v5/mapbox/walking?access_token=pk.eyJ1IjoicHJvY29ubGlmZSIsImEiOiJjanM4YjI4aTAxNW4zNGFtczR1ajdrbzlvIn0.81axTvh8oPJhrFYDZhuCzA',
                    waypoints: [
                        L.latLng(latitude, longitude),
                        //L.latLng(34.695638, 135.195219)//,    // ☆経由地を追加
                        //L.latLng(nLatitude, nLongitude)
                        L.latLng(<%= Enum.at(Enum.at(light_data,1218),1)%>, <%= Enum.at(Enum.at(light_data,1218),0)%>),
                        L.latLng(<%= Enum.at(Enum.at(light_data,1217),1)%>, <%= Enum.at(Enum.at(light_data,1217),0)%>),
                        L.latLng(<%= Enum.at(Enum.at(light_data,1216),1)%>, <%= Enum.at(Enum.at(light_data,1216),0)%>),
                        L.latLng(<%= Enum.at(Enum.at(light_data,1215),1)%>, <%= Enum.at(Enum.at(light_data,1215),0)%>),
                        L.latLng(<%= Enum.at(Enum.at(light_data,1214),1)%>, <%= Enum.at(Enum.at(light_data,1214),0)%>),
                        L.latLng(<%= Enum.at(Enum.at(light_data,1213),1)%>, <%= Enum.at(Enum.at(light_data,1213),0)%>),
                        L.latLng(<%= Enum.at(Enum.at(light_data,1259),1)%>, <%= Enum.at(Enum.at(light_data,1259),0)%>),
                        L.latLng(<%= Enum.at(Enum.at(light_data,1258),1)%>, <%= Enum.at(Enum.at(light_data,1258),0)%>),
                        L.latLng(<%= Enum.at(Enum.at(light_data,1257),1)%>, <%= Enum.at(Enum.at(light_data,1257),0)%>) 
                    ]}).addTo(map);
        }

        // Start this program.
        main();
    }

    function error() {
        output.innerHTML = "Unable to retrieve your location";
    }
    navigator.geolocation.getCurrentPosition(success, error);
</script>