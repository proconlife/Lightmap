<%
latitude     = 34.685067
longitude    = 135.199281
locationName = "KIITO"


# jsonを読み込む。リストの最初が左下座標、最後が右上座標。
# data = [
#  [135.1083339342, 34.79166694500001, 4],
#  [135.11250060089998, 34.79166694500001, 4],
#  ...
#  [135.1083339342, 34.78750027830001, 5],
#  [135.11250060089998, 34.78750027830001, ...],
#  ...
# ]
light_data            = Jason.decode!(elem(File.read("assets/result.json"),1))
[min_lon, max_lat, _] = Enum.at(light_data,0)
[max_lon, min_lat, _] = List.last(light_data)
num_of_lon_area = length(Enum.filter(light_data, &Enum.at(&1,1) == min_lat))
num_of_lat_area = length(Enum.filter(light_data, &Enum.at(&1,0) == min_lon))
dlon = (max_lon - min_lon) / (num_of_lon_area - 1)
dlat = (max_lat - min_lat) / (num_of_lat_area - 1)
# dataの座標はエリアの中心座標。差分/2を足し引きするとエリアが復元できる
rlon = dlon/2
rlat = dlat/2

data = [
    %{name: "二宮温泉", longitude: 135.1958495, latitude: 34.6982648},
    %{name: "HATなぎさの湯", longitude: 135.2132588, latitude: 34.6957018},
    %{name: "つかさ湯", longitude: 135.180154, latitude: 34.686355},
    %{name: "兵庫県公衆浴場業生活衛生同業組合", longitude: 135.178596, latitude: 34.688325},
    %{name: "相生湯", longitude: 135.1755739, latitude: 34.6931657},
    %{name: "ラドン温泉たちばな湯", longitude: 135.170616, latitude: 34.682589},
    %{name: "割塚温泉", longitude: 135.2105256, latitude: 34.7052324},
    %{name: "銭湯朝日湯", longitude: 135.2021821, latitude: 34.7047818},
    %{name: "みなと湯", longitude: 135.174535, latitude: 34.67572},
    %{name: "（有）富清観光", longitude: 135.169983, latitude: 34.680231}
]

# 明るさカウントブロックデータ
label     = [:minlongitude, :minlatitude, :maxlongitude, :maxlatitude, :count]
blocklist = Enum.map(light_data, fn(i)->
    Enum.zip(label,[Enum.at(i,0) - rlon, Enum.at(i,1) - rlat, Enum.at(i,0) + rlon, Enum.at(i,1) + rlat, Enum.at(i,2)])
end)
%>

<div id="map"></div>
<div id="out"></div>
<div id="dijkstra"></div>
<script>
    var output = document.getElementById("out");
    if (!navigator.geolocation){
        output.innerHTML = "<p>Geolocation is not supported by your browser</p>";
    }
    
 
    function success(position) {
        // var latitude  = position.coords.latitude;
        // var longitude = position.coords.longitude;
        var latitude =  <%= latitude %>;
        var longitude = <%= longitude %>;

        var map = L.map('map').setView([latitude, longitude], 13);
        // Icon
        var icon_hospital = L.icon({
            iconUrl: 'images/hospital.png',
            iconSize: [65, 52],
            iconAnchor: [22, 94],
            popupAnchor: [-3, -76]
            //shadowUrl: 'my-icon-shadow.png',
            //shadowSize: [68, 95],
            //shadowAnchor: [22, 94]
            });

        //mapboxのベースタイルを読み込む
        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 18,
            id: 'mapbox.streets',
            accessToken: 'pk.eyJ1IjoicHJvY29ubGlmZSIsImEiOiJjanM4YjI4aTAxNW4zNGFtczR1ajdrbzlvIn0.81axTvh8oPJhrFYDZhuCzA'
        }).addTo(map);
        // geeの出力を読み込む
        //L.tileLayer('https://storage.googleapis.com/testgeomap/geomap/{z}/{x}/{y}', {
        L.tileLayer('https://storage.googleapis.com/testgeomap/night_201805/{z}/{x}/{y}', {
            opacity: 0.5,
            maxZoom: 13,
            id: 'mytie'
        }).addTo(map);
        // 現在位置のピンを置く
        //L.marker([latitude, longitude],{icon: icon_hospital}).addTo(map)
        L.marker([latitude, longitude]).addTo(map)
        .bindPopup('現在位置')
        .openPopup();

        var minDistance = 0;
        var nLatitude = 0;
        var nLongitude = 0;
        var nName = "";


        <%= for block <- blocklist do %>
        // ☆ブロック情報の可視化
        L.polygon([
            [<%= block[:minlatitude] %>, <%= block[:minlongitude] %>],
            [<%= block[:minlatitude] %>, <%= block[:maxlongitude] %>],
            [<%= block[:maxlatitude] %>, <%= block[:maxlongitude] %>],
            [<%= block[:maxlatitude] %>, <%= block[:minlongitude] %>]
        ]).addTo(map);

        <% end %>

        <%= for datum <- data do %>
        // 地点情報のピン
        var to =  turf.point([<%= datum[:"latitude"] %>,<%= datum[:"longitude"] %>]);
        var from = turf.point([latitude, longitude]);
        var options = {units: 'kilometers'}; 
        var distance = turf.distance(from, to, options);

        L.marker([<%= datum[:"latitude"] %>,<%= datum[:"longitude"] %>]).addTo(map)
        .bindPopup('<%= datum[:"name"] %><p>現在位置からの距離：'+ Math.round(distance*1000) + 'm</p>')

        // ☆明るさカウント=0の場所かどうか
        <%
        nBlock = blocklist|>Enum.count(
            fn(blockm) 
            -> blockm[:minlatitude] <= datum[:latitude] and blockm[:maxlatitude] >= datum[:latitude] and
            blockm[:minlongitude] <= datum[:longitude] and blockm[:maxlongitude] >= datum[:longitude] and
            blockm[:count] === 0 end)
        %>

        if (minDistance === 0 || minDistance > distance) {
            // ☆明るさカウント=0の場合は保持しない
            if (<%= nBlock %> === 0){
                // 最短目的地を保持
                minDistance = distance;
                nName = "<%= datum[:"name"] %>"
                nLatitude = <%= datum[:"latitude"] %>;
                nLongitude = <%= datum[:"longitude"] %>;
            }
        }

        <% end %>
        var control = L.Routing.control({
            router: L.Routing.mapbox('pk.eyJ1IjoicHJvY29ubGlmZSIsImEiOiJjanM4YjI4aTAxNW4zNGFtczR1ajdrbzlvIn0.81axTvh8oPJhrFYDZhuCzA'),
            waypoints: [
                L.latLng(latitude, longitude),
                L.latLng(34.695638, 135.195219),    // ☆経由地を追加
                L.latLng(nLatitude, nLongitude)
            ]}).addTo(map);
        // L.Routing.errorControl(control).addTo(map);
            
        L.marker([nLatitude, nLongitude]).addTo(map)
        .bindPopup(nName +'<p>現在位置からの距離：'+ Math.round(minDistance*1000) + 'm</p>')
    }

    function error() {
        output.innerHTML = "Unable to retrieve your location";
    }
    navigator.geolocation.getCurrentPosition(success, error);


    // 

    function Node(id) {
        this.edgesTo      = [];
        this.edgesCost    = [];
        this.done         = false;
        this.cost         = -1;
        this.id           = id;
        this.previousNode = null;
    }
    Node.prototype.addNode = function (node, cost) {
        this.edgesTo.push(node);
        this.edgesCost.push(cost);
    };

    function createNodes() {
        var node1 = new Node(1); // start
        var node2 = new Node(2); // top
        var node3 = new Node(3); // center
        var node4 = new Node(4); // bottom-left
        var node5 = new Node(5); // bottom-right
        var node6 = new Node(6); // goal

        node1.addNode(node2, 5);
        node1.addNode(node3, 4);
        node1.addNode(node4, 2);

        node2.addNode(node1, 5);
        node2.addNode(node6, 6);
        node2.addNode(node3, 2);

        node3.addNode(node2, 2);
        node3.addNode(node1, 4);
        node3.addNode(node4, 3);
        node3.addNode(node5, 2);

        node4.addNode(node1, 2);
        node4.addNode(node3, 3);
        node4.addNode(node5, 6);

        node5.addNode(node4, 6);
        node5.addNode(node3, 2);
        node5.addNode(node6, 4);

        node6.addNode(node2, 6);
        node6.addNode(node5, 4);

        return [
            node1, node2, node3, node4, node5, node6
        ];
    }


    function main() {

        var nodes = createNodes();

        // start node is first node
        nodes[0].cost = 0;

        while (true) {
            var processNode = null;

            for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];

                // 訪問済み or まだコストが未設定
                if (node.done || node.cost < 0) {
                    continue;
                }

                if (!processNode) {
                    processNode = node;
                    continue;
                }

                // 一番小さいコストのノードを探す
                if (node.cost < processNode.cost) {
                    processNode = node;
                }
            }

            if (!processNode) {
                break;
            }

            processNode.done = true;

            for (var i = 0; i < processNode.edgesTo.length; i++) {
                var node = processNode.edgesTo[i];
                var cost = processNode.cost + processNode.edgesCost[i];

                // コストが未設定 or コストの少ない経路がある場合はアップデート
                var needsUpdate = (node.cost < 0) || (node.cost > cost);
                if (needsUpdate) {
                    node.cost = cost;
                    node.previousNode = processNode;
                }
            }
        }

        console.log('Has been done to search path.');
        console.log(nodes);

        var goalNode = nodes[5];
        console.log('Shoten cost is ' + goalNode.cost);

        console.log('Shoten path');

        console.log('=====================');
        var path = 'Goal -> ';
        var currentNode = goalNode;
        while(true) {
            var nextNode = currentNode.previousNode;
            if (!nextNode) {
                path += ' Start';
                break;
            }
            path += nextNode.id + ' -> ';
            currentNode = nextNode;
        }

        console.log(path);
        console.log('=====================');
    }

    // Start this program.
    main();
</script>